<?php
// $Id$

/*
The MIT License

Copyright (c) 2008 Accession Media, LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// constants
define('ERRORLYTICS_DEFAULT_URL', 'http://www.errorlytics.com');
define('ERRORLYTICS_URL_VAR_NAME', 'errorlytics_url');
define('ERRORLYTICS_SECRET_KEY_VAR_NAME', 'errorlytics_secret_key');
define('ERRORLYTICS_ACCOUNT_ID_VAR_NAME', 'errorlytics_account_id');
define('ERRORLYTICS_WEBSITE_ID_VAR_NAME', 'errorlytics_website_id');
define('ERRORLYTICS_PLUGIN_TYPE', 'drupal_5.x');
define('ERRORLYTICS_PLUGIN_VERSION', '1.1.1');
define('ERRORLYTICS_API_VERSION', '1.0');

function errorlytics_menu() {
    $items = array();
    $items[] = array(
        'path' => 'errorlytics',
        'title' => t('Page not found'),
        'access' => true,
        'callback' => 'errorlytics',
        'type' => MENU_CALLBACK
    );
    $items[] = array(
        'path' => 'admin/settings/errorlytics',
        'title' => t('Errorlytics module settings'),
        'description' => t('Errorlytics module settings'),
        'callback' => 'errorlytics_get_form',
        'callback arguments' => 'errorlytics_admin',
        'access' => user_access('access administration pages'),
        'type' => MENU_NORMAL_ITEM
    );
    return $items;
}

function errorlytics_params($path, $secret_key) {
    $params = array();
    foreach ($_SERVER as $key => $value) {
        if (!preg_match("/cookie/i", $key)) {
            $params['error[' . strtolower($key) . ']'] = $value;
        }
    }
    $client_occurred_at = gmdate('Y-m-d\TH:i:s\Z');
    $params['error[client_occurred_at]'] = $client_occurred_at;
    $params['signature'] = sha1($client_occurred_at . $path . $secret_key);
    $params['error[fake]'] = 'false';
    $params['format'] = 'xml';
    $params['plugin_type'] = ERRORLYTICS_PLUGIN_TYPE;
    $params['plugin_version'] = ERRORLYTICS_PLUGIN_VERSION;
    $params['api_version'] = ERRORLYTICS_API_VERSION;
    return $params;
}

function errorlytics_post($url, $secret_key, $account_id, $website_id) {
    $path = '/accounts/' . $account_id . '/websites/' . $website_id . '/errors';
    $params = errorlytics_params($path, $secret_key);
    $ch = curl_init();
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
    curl_setopt($ch, CURLOPT_URL, $url . $path);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($ch);
    curl_close($ch);
    return $response;
}

function errorlytics_variable_get_trim($variable, $default) {
    $value = variable_get($variable, $default);
    // we are using false as default below so we don't trim false
    if ($value) $value = trim($value);
    return $value;
}

function errorlytics() {
    // the variables get trimmed on both ends during storage, so don't worry
    // about that, but make sure to take the / of the tail of the url
    $url = errorlytics_variable_get_trim(ERRORLYTICS_URL_VAR_NAME, ERRORLYTICS_DEFAULT_URL);
    $url = chop($url, '/');
    $secret_key = errorlytics_variable_get_trim(ERRORLYTICS_SECRET_KEY_VAR_NAME, false);
    $account_id = errorlytics_variable_get_trim(ERRORLYTICS_ACCOUNT_ID_VAR_NAME, false);
    $website_id = errorlytics_variable_get_trim(ERRORLYTICS_WEBSITE_ID_VAR_NAME, false);

    // if missing settings let fall through to default 404 page
    if (!$url || !$secret_key || !$account_id || !$website_id) return;

    $response = errorlytics_post($url, $secret_key, $account_id, $website_id);

    preg_match('/<response-code>(.+)<\/response-code>/', $response, $matches);
    $response_code = html_entity_decode($matches[1]);

    preg_match('/<uri>(.+)<\/uri>/', $response, $matches);
    $uri = html_entity_decode($matches[1]);

    switch ($response_code) {
        case '404':
            // falling through to default drupal 404 page for now
            // this is probably a better idea than taking the 404
            // page from the return
            break;
        case '301':
        case '302':
            // TODO: may want to switch to drupal_goto for in site redirects
            header('Location: ' . $uri, true, $response_code);
            break;
    }
}

/*
function errorlytics_help($section='') {
    return 'provide help or ditch this func?';
}
*/

function errorlytics_perm() {
    return array('administer errorlytics');
}

function errorlytics_get_form($form_id) {
  $form = drupal_get_form($form_id);
  $errorlytics_url = variable_get(ERRORLYTICS_URL_VAR_NAME, ERRORLYTICS_DEFAULT_URL);
  $script_link = '<script src="' . $errorlytics_url . '/javascripts/errorlytics.js"></script>';
  $script  = '<script>';
  $script .= 'function testSettings() {';
  // ids are apparently dasherized from the underscored name
  $script .= '  var secretKey = document.getElementById("edit-errorlytics-secret-key").value;';
  $script .= '  var accountId = document.getElementById("edit-errorlytics-account-id").value;';
  $script .= '  var websiteId = document.getElementById("edit-errorlytics-website-id").value;';
  $script .= '  ERRORLYTICS.testSettings("' . $errorlytics_url . '", secretKey, accountId, websiteId);';
  $script .= '}';
  $script .= '</script>';
  return $form . $script_link . $script;
}

function errorlytics_admin() {
    $form = array();
    $form[ERRORLYTICS_URL_VAR_NAME] = array(
        '#type' => 'textfield',
        '#title' => t('Errorlytics URL'),
        '#default_value' => variable_get(ERRORLYTICS_URL_VAR_NAME, ERRORLYTICS_DEFAULT_URL),
        '#description' => t('The URL hosting the Errorlytics service.'),
        '#required' => true
    );
    $form[ERRORLYTICS_SECRET_KEY_VAR_NAME] = array(
        '#type' => 'textfield',
        '#title' => t('Errorlytics Secret Key'),
        '#default_value' => variable_get(ERRORLYTICS_SECRET_KEY_VAR_NAME, ''),
        '#description' => t('Your secret key for the Errorlytics service.'),
        '#required' => true
    );
    $form[ERRORLYTICS_ACCOUNT_ID_VAR_NAME] = array(
        '#type' => 'textfield',
        '#title' => t('Errorlytics Account ID'),
        '#default_value' => variable_get(ERRORLYTICS_ACCOUNT_ID_VAR_NAME, ''),
        '#description' => t('Your account id for the Errorlytics service.'),
        '#required' => true
    );
    $form[ERRORLYTICS_WEBSITE_ID_VAR_NAME] = array(
        '#type' => 'textfield',
        '#title' => t('Errorlytics Website ID'),
        '#default_value' => variable_get(ERRORLYTICS_WEBSITE_ID_VAR_NAME, ''),
        '#description' => t('Your website id for the Errorlytics service.'),
        '#required' => true
    );
    $form['errorlytics_test_settings_button'] = array(
        '#type' => 'button',
        '#value' => t('Test configuration'),
        '#attributes' => array(
            'onclick' => 'testSettings(); return false;'
        )
    );
    return system_settings_form($form);
}
